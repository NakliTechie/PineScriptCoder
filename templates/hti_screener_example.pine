//@version=5
indicator('HTI - 1', overlay = true, max_lines_count = 500, max_labels_count = 500, max_boxes_count = 500)

// --- Inputs ---
// Screener Display
col_width = input.float(5, title = 'Column Width (%)', group = "Screener Display")
scr_numb = input.int(1, title = 'Screen #', tooltip = '1 - rightmost screener', minval = 1, group = "Screener Display")

// HTI Parameters
p1_len = input.int(30, title='T3 Length 1', group="Signal Parameters")
p2_len = input.int(12, title='T3 Length 2', group="Signal Parameters")
hot = input.float(0.4, title='T3 Coefficient', group="Signal Parameters")

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
// SYMBOLS - Enable Flags
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
u01 = input.bool(true, title = '', group = 'Symbols', inline = 's01')
u02 = input.bool(true, title = '', group = 'Symbols', inline = 's02')
u03 = input.bool(true, title = '', group = 'Symbols', inline = 's03')
u04 = input.bool(true, title = '', group = 'Symbols', inline = 's04')
u05 = input.bool(true, title = '', group = 'Symbols', inline = 's05')

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
// SYMBOLS - Tickers
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
s01 = input.symbol("NVDA", group = 'Symbols', inline = "s01")
s02 = input.symbol("AAPL", group = 'Symbols', inline = "s02")
s03 = input.symbol("TSLA", group = 'Symbols', inline = "s03")
s04 = input.symbol("AMZN", group = 'Symbols', inline = "s04")
s05 = input.symbol("GOOGL", group = 'Symbols', inline = "s05")

// --- Script Name ---
string SCRIPT_NAME = "HTI"

// --- Colors Definition ---
colorNeutralBG = color.new(color.gray, 0)
colorSignalTXT = color.new(color.white, 0)
colorBuyBG = color.new(color.green, 75)
colorSellBG = color.new(color.red, 75)

// --- Helper function for symbol name ---
_only_symbol_name(s) => 
    string _sym = ""
    if not na(s)
        if str.contains(s, ":")
            _sym := array.get(str.split(s, ':'), 1)
        else
            _sym := s
        _sym := str.replace_all(_sym, "_", "-")
    _sym

// --- T3 Calculation Function (Helper) ---
f_t3(src, p, hot_val) =>
    e1 = ta.ema(src, p)
    e2 = ta.ema(e1, p)
    e3 = ta.ema(e2, p)
    e4 = ta.ema(e3, p)
    e5 = ta.ema(e4, p)
    e6 = ta.ema(e5, p)
    b2 = hot_val * hot_val
    b3 = hot_val * hot_val * hot_val
    c1 = -b3
    c2 = 3 * b2 + 3 * b3
    c3 = -6 * b2 - 3 * hot_val - 3 * b3
    c4 = 1 + 3 * hot_val + b3 + 3 * b2
    c1 * e6 + c2 * e5 + c3 * e4 + c4 * e3

// --- Calculation Function for request.security ---
calculateHTI_Signal() => 
    // --- SET 1: Pivot/ATR Band Calculation ---
    int len = 3
    float mult = 0.6
    var float p_h = na
    var float p_l = na

    float ph = ta.pivothigh(len, len)
    float pl = ta.pivotlow(len, len)

    if not na(ph)
        p_h := ph
    if not na(pl)
        p_l := pl

    bool pivot_longSignal = false
    bool pivot_shortSignal = false

    if not na(p_h) and not na(p_l)
        float avg = math.avg(p_h, p_l)
        float atr = ta.atr(200) * mult
        float upper = avg + atr
        float lower = avg - atr
        pivot_longSignal := ta.crossover(close, upper)
        pivot_shortSignal := ta.crossunder(close, lower)

    // --- SET 2: T3 Daytrader Coral Calculation ---
    int p_t3 = 12
    float hot_t3 = 0.4
    float hret = f_t3(high, p_t3, hot_t3)
    float lret = f_t3(low, p_t3, hot_t3)

    bool t3_longSignal = ta.crossover(close, hret)
    bool t3_shortSignal = ta.crossunder(close, lret)

    // --- Combine Signals ---
    bool longSignal = pivot_longSignal or t3_longSignal
    bool shortSignal = pivot_shortSignal or t3_shortSignal

    // --- Signal Determination ---
    string signalCode = "---"
    if longSignal
        signalCode := "BUY"
    else if shortSignal
        signalCode := "SELL"

    // Append percentage change if a signal exists
    if signalCode != "---"
        float pct_change = ((close - close[1]) / close[1]) * 100.0
        string pct_change_str = str.format(" {0,number,#.##}%", pct_change)
        signalCode := signalCode + pct_change_str
        
    signalCode

// --- Security Calls ---
s_expr = calculateHTI_Signal() 

signal01 = request.security(s01, timeframe.period, s_expr)
signal02 = request.security(s02, timeframe.period, s_expr)
signal03 = request.security(s03, timeframe.period, s_expr)
signal04 = request.security(s04, timeframe.period, s_expr)
signal05 = request.security(s05, timeframe.period, s_expr)

// --- ARRAYS ---
var s_arr = array.new_string(5)
var u_arr = array.new_bool(5)
var signal_arr = array.new_string(5)

if barstate.isfirst
    array.set(s_arr, 0, _only_symbol_name(s01))
    array.set(u_arr, 0, u01)
    array.set(s_arr, 1, _only_symbol_name(s02))
    array.set(u_arr, 1, u02)
    array.set(s_arr, 2, _only_symbol_name(s03))
    array.set(u_arr, 2, u03)
    array.set(s_arr, 3, _only_symbol_name(s04))
    array.set(u_arr, 3, u04)
    array.set(s_arr, 4, _only_symbol_name(s05))
    array.set(u_arr, 4, u05)

// Update signal_arr on every bar
array.set(signal_arr, 0, signal01)
array.set(signal_arr, 1, signal02)
array.set(signal_arr, 2, signal03)
array.set(signal_arr, 3, signal04)
array.set(signal_arr, 4, signal05)

// --- Table Drawing ---
var tbl = table.new(position.top_right, scr_numb > 1 ? 3 : 2, 10, frame_color = #151715, frame_width = 1, border_width = 2, border_color = color.new(color.white, 100))

if barstate.islast
    table.clear(tbl, 0, 0, scr_numb > 1 ? 2 : 1, 9)

    var int countBuy = 0
    var int countSell = 0
    countBuy := 0
    countSell := 0

    int rounded_col_width = int(math.round(col_width))

    string header_text = SCRIPT_NAME + " - " + str.tostring(scr_numb)
    table.cell(tbl, 0, 0, 'Symbol', width = rounded_col_width, text_halign = text.align_center, bgcolor = color.gray, text_color = color.white, text_size = size.small)
    table.cell(tbl, 1, 0, header_text, width = rounded_col_width, text_halign = text.align_center, bgcolor = color.gray, text_color = color.white, text_size = size.small)
    if scr_numb > 1
        table.cell(tbl, 2, 0, '', width = rounded_col_width * 2 * (scr_numb - 1), text_halign = text.align_center, bgcolor = color.new(color.gray, 100), text_size = size.small)

    int visible_row_index = 1 
    for i = 0 to 4 by 1
        if array.get(u_arr, i) 
            string signal_val_from_array = array.get(signal_arr, i)
            string current_signal = na(signal_val_from_array) ? "---" : signal_val_from_array
            string ticker_name = array.get(s_arr, i)

            color signal_bg_col = colorNeutralBG 
            
            if str.contains(current_signal, "BUY")
                countBuy += 1
                signal_bg_col := colorBuyBG
            else if str.contains(current_signal, "SELL")
                countSell += 1
                signal_bg_col := colorSellBG

            table.cell(tbl, 0, visible_row_index, ticker_name, text_halign = text.align_center, bgcolor = color.gray, text_color = color.white, text_size = size.small, width = rounded_col_width)
            table.cell(tbl, 1, visible_row_index, current_signal, text_halign = text.align_center, bgcolor = signal_bg_col, text_color = colorSignalTXT, text_size = size.small, width = rounded_col_width)

            visible_row_index += 1